name: Release (macOS DMG)

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to publish (e.g., v0.1.1)"
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: macos-13
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Diagnose Xcode and project
        run: |
          set -euo pipefail
          xcodebuild -version
          system_profiler SPSoftwareDataType || true
          cd LLMKeyring
          xcodebuild -list -project LLMKeyring.xcodeproj

      - name: Generate AppIcon assets
        run: |
          set -euo pipefail
          cd LLMKeyring
          bash scripts/make_app_icon.sh

      - name: Determine tag
        id: determine_tag
        shell: bash
        run: |
          set -euo pipefail
          case "${{ github.event_name }}" in
            push)
              echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT" ;;
            release)
              echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT" ;;
            workflow_dispatch)
              echo "tag=${{ github.event.inputs.tag }}" >> "$GITHUB_OUTPUT" ;;
            *) echo "Unsupported event: ${{ github.event_name }}" >&2; exit 1 ;;
          esac

      - name: Build app (no signing)
        run: |
          set -euo pipefail
          cd LLMKeyring
          xcodebuild \
            -project LLMKeyring.xcodeproj \
            -scheme LLMKeyring \
            -configuration Release \
            -derivedDataPath build \
            -destination 'platform=macOS' \
            CODE_SIGNING_ALLOWED=NO \
            clean build | tee build-release.log

      - name: Embed ICNS icon into app bundle
        run: |
          set -euo pipefail
          cd LLMKeyring
          APP="build/Build/Products/Release/LLMKeyring.app"
          test -d "$APP"
          BASE_PNG="Assets.xcassets/AppIcon.appiconset/icon_1024.png"
          if [ ! -f "$BASE_PNG" ]; then
            echo "Base icon missing, using generated placeholder" >&2
            BASE_PNG="Assets.xcassets/AppIcon.appiconset/icon_1024.png"
          fi
          ICONSET="tmp.iconset"
          rm -rf "$ICONSET" && mkdir -p "$ICONSET"
          # Generate required sizes with correct names for iconutil
          sips -Z 16  "$BASE_PNG" --out "$ICONSET/icon_16x16.png" >/dev/null
          sips -Z 32  "$BASE_PNG" --out "$ICONSET/icon_16x16@2x.png" >/dev/null
          cp "$ICONSET/icon_16x16@2x.png" "$ICONSET/icon_32x32.png"
          sips -Z 64  "$BASE_PNG" --out "$ICONSET/icon_32x32@2x.png" >/dev/null
          sips -Z 128 "$BASE_PNG" --out "$ICONSET/icon_128x128.png" >/dev/null
          sips -Z 256 "$BASE_PNG" --out "$ICONSET/icon_128x128@2x.png" >/dev/null
          cp "$ICONSET/icon_128x128@2x.png" "$ICONSET/icon_256x256.png"
          sips -Z 512 "$BASE_PNG" --out "$ICONSET/icon_256x256@2x.png" >/dev/null
          cp "$ICONSET/icon_256x256@2x.png" "$ICONSET/icon_512x512.png"
          cp "$BASE_PNG" "$ICONSET/icon_512x512@2x.png"
          iconutil -c icns "$ICONSET" -o LLMKeyring.icns
          mkdir -p "$APP/Contents/Resources"
          cp LLMKeyring.icns "$APP/Contents/Resources/LLMKeyring.icns"
          /usr/libexec/PlistBuddy -c "Delete :CFBundleIconFile" "$APP/Contents/Info.plist" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleIconFile string LLMKeyring" "$APP/Contents/Info.plist" || \
          /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile LLMKeyring" "$APP/Contents/Info.plist"

      - name: Upload build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-release-log
          path: LLMKeyring/build-release.log

      - name: Create DMG
        run: |
          set -euo pipefail
          cd LLMKeyring
          APP="build/Build/Products/Release/LLMKeyring.app"
          test -d "$APP"
          mkdir -p dist/LLMKeyring
          cp -R "$APP" dist/LLMKeyring/
          ln -s /Applications dist/LLMKeyring/Applications || true
          hdiutil create -volname "LLMKeyring" -srcfolder dist/LLMKeyring -ov -format UDZO LLMKeyring.dmg
          ditto -c -k --sequesterRsrc --keepParent "$APP" LLMKeyring.app.zip

      - name: Generate checksums and release notes
        run: |
          set -euo pipefail
          DMG_SHA=$(shasum -a 256 LLMKeyring/LLMKeyring.dmg | awk '{print $1}')
          ZIP_SHA=$(shasum -a 256 LLMKeyring/LLMKeyring.app.zip | awk '{print $1}')
          {
            echo "## Checksums (SHA256)";
            echo "${DMG_SHA}  LLMKeyring.dmg";
            echo "${ZIP_SHA}  LLMKeyring.app.zip";
            echo;
            echo "## First run (unsigned)";
            echo "- Right-click the app and choose Open once, or";
            echo "- System Settings > Privacy & Security > Security > Open Anyway.";
            echo;
            echo "This build is unsigned and may require manual approval on first launch.";
          } > RELEASE_NOTES.md

      - name: Publish Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.determine_tag.outputs.tag }}
          files: |
            LLMKeyring/LLMKeyring.dmg
            LLMKeyring/LLMKeyring.app.zip
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: signing + notarization (requires secrets). Add steps here if you provide Developer ID cert & notary creds.
